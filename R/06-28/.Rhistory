library(maps)
install.packages(maps)
install.packages(/Users/ab2081/Downloads/maps/)
install.packages(/Users/ab2081/Downloads/maps)
install.packages('/Users/ab2081/Downloads/maps.zip')
install.packages('/Users/ab2081/Downloads/maps.zip')
install.packages("ggmap")
hungary <- get_map(location = 'Europe', zoom = 4)
library(ggmap)
hungary <- get_map(location = 'Europe', zoom = 4)
hungary
mapPoints <- ggmap(hungary)
mapPoints
hungary <- get_map(location = 'Hungary', zoom = 4)
mapPoints <- ggmap(hungary)
mapPoints
hungary <- get_map(location = "Hungary")
hungary
mapPoints <- ggmap(hungary)
mapPoints
get_map(location = "Hungary", zoom = auto, scale = auto)
get_map(location = "Hungary", zoom = "auto", scale = "auto")
mapPoints <- ggmap(hungary)
mapPoints
get/
?
sdf90
get_map(location = "Hungary", zoom = 8, source = "osm")
get_map(location = "Hungary", zoom = 8)
mapPoints <- ggmap(hungary)
mapPoints
mapPoints
hungary <- get_map(location = "Hungary", zoom = 8)
mapPoints <- ggmap(hungary)
mapPoints
hungary <- get_map(location = "Hungary", zoom = 7)
mapPoints <- ggmap(hungary)
mapPoints <- ggmap(hungary)
mapPoints
hungary <- get_map(location = "Hungary", zoom = 7, scale = "auto", maptype = c("roadmap"))
mapPoints <- ggmap(hungary)
mapPoints
hungary <- get_map(location = "Hungary", zoom = 7, scale = "auto", maptype = c("roadmap"), color = "bw")
mapPoints <- ggmap(hungary)
mapPoints
install.packages("maps")
install.packages("maps")
install.packages("maps")
install.packages("mapdata")
library(maps)
library(mapdata)
map("worldHires", "Hungary")
map("worldHires", "Hungary", fill=TRUE)
map("worldHires", "Hungary", fill=TRUE, col="gray20")
map("worldHires", "Hungary", fill=TRUE, col="gray80")
births <- read.csv("/Users/ab2081/src/possessives-experiment-ibex/maps/birth.csv")
points(births$lon, births$lat, col="red")
points(births$lon, births$lat, col="red", pch=19)
help(points())
help(points)
points(births$lon, births$lat, births$id, col="red", pch=19)
points(births$lon, births$lat, col="red", pch=19)
points(residence$lon, residence$lat, col="green", pch=19)
residence <- read.csv("Users/ab2081/src/possessives-experiment-ibex/maps/residence.csv")
residence <- read.csv("/Users/ab2081/src/possessives-experiment-ibex/maps/residence.csv")
points(residence$lon, residence$lat, col="green", pch=19)
load("~/src/possessives-experiment-ibex/overt-possessors/results_april13/possessives_results.RData")
setwd?
?
sdf
?setwd
setwd('/Users/ab2081/src/possessives-experiment-ibex/R/06-28/')
?load
?load(.Rdata)
?load(.RData)
load("~/src/possessives-experiment-ibex/R/06-28/exp2-andras.R")
str(data_results)
# remove fillers and practice sentences
library(IBEX.to.R)
# load the results from "results.txt" and ignoring some of the columns
alldata_results = get.results("results.txt", "AcceptabilityJudgment", del.col = c(2, 3, 4, 5, 7, 10, 11))
# delete the second empty line in alldata_results
data_results = subset(alldata_results, Col9 != "")
# remove fillers and practice sentences
data_results = subset(data_results, type != "practice")
data_results = subset(data_results, grepl("^t-.*", data_results$type))
# rename Col8 and Col 9 to something more useful:
names(data_results)[3] <- "sent"
names(data_results)[4] <- "ans"
# the following turns the "type" into a factor
data_results$type = as.factor(data_results$type)
str(data_results)
blokkA <- data_results[data_results$type=="t-A2-mar-ext-sbj-2"]$subject
blokkA <- data_results[data_results$type=="t-A2-mar-ext-sbj-2",]$subject
str(blokkA)
head(blokkA)
blokkB <- data_results[data_results$type=="t-B2-mar-nil-sbj-n"]$subject
blokkB <- data_results[data_results$type=="t-B2-mar-nil-sbj-n", ]$subject
head(blokkB)
length(blokkB)
length(blokkA)
all_subjects <- data_results$subject
head(all_subjects)
blokkC <- all_subjects - blokkA
tail(blokkA)
head(blokkB)
head(blokkA)
blokkA = as.factor(blokkA)
blokkA
blokkB
all_subjects
?%in%
%in%
?in
blokkA %in% blokkB
blokkA %in% all_subjects
for (blokkA %in% all_subjects) {print test}
for (blokkA %in% all_subjects){print test}
for (i in blokkA){print i}
blokkA
?subset
blokkC <- subset(all_subjects, blokkA)
blokkC <- subset(all_subjects, blokkA %in% all_subjects)
blokkC
blokkA
blokkC <- subset(all_subjects, blokkA %notin% all_subjects)
blokkC <- subset(all_subjects, blokkA %!in% all_subjects)
blokkA %!in% all_subjects
blokkA %in% all_subjects
!(blokkA %in% all_subjects)
*!(blokkA %in% all_subjects) | (!blokkB %in% all_subjects))
(!(blokkA %in% all_subjects) | (!blokkB %in% all_subjects))
((blokkA %in% all_subjects) | (blokkB %in% all_subjects))
((blokkA %in% all_subjects) %o% (blokkB %in% all_subjects))
((blokkA %in% all_subjects) %or% (blokkB %in% all_subjects))
blokkA | blokkB
blokkA | blokkB %in% all_subjects
(blokkA | blokkB) %in% all_subjects
blokkA %in% all_subjects
blokkA %in% all_subjects | blokkB %in% all_subjects
(blokkA %in% all_subjects) | (blokkB %in% all_subjects)
blokkC <- subset(all_subjects, !(blokkA %in% all_subjects))
head(blokkC)
?as.vector
?as.vector.factor
is.vector(blokkB)
is.factor(blokkA)
?for
()
vector(blokkA)
as.vector(blokkA)
test <- subset(as.vector(all_subjects), as.vector(blokkA))
as.vector(all_subjects) - as.vector(blokkA)
?subset
?is.na
?droplevels
droplevels(blokkA)
droplevels(blokkB)
as.list
as.list(all_subjects)
as.vector(all_subjects)
alldataC <- alldata_results[alldata_results$type=="tf39"]$subject
alldataC <- alldata_results[alldata_results$type=="tf39",]$subject
droplevels(alldataC)
blokkC <- alldataC
blokkC
blokkA
droplevels(blokkA)
blokkA <- droplevels(blokkA)
blokkB <- droplevels(blokkB)
blokkC <- droplevels(blokkC)
